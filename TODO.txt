Create a way to intercept onrowselect so it doesn't set window.location.

Create, Update, and Destroy should be resolved in the same way as Read. Functions should be supported.

Render the table columns and container first. Then read. Then render the table body.

If paging is turned off, use client pager to sort and search.
Problem: we won't know whether we can use client pager until after we've retrieved data from the server.

Now that we've gotten rid of DataSource, how should we handle all the various scenarios?
It's possible for each of the CRUD operations to be URL, function, object (RequestModel) or array.
Further, we have to wait until after the initial read to assign handlers to Page, Sort and Search.
It's possible that Read could be a URL, but the first call to it yields all the data.
The default is to rely on the server to decide whether it should page or not.
If the server receieves a Top value of -1, it could decide to send all the data or just a page.
If the latter, it would send back a modified RequestModel indicating what it did.
But what if the client wanted to override this on the first request?
Without knowing how many records there are, it would have to set Top to -1 to retrieve them all.
If we want, we could use a function to set first read parameters.)
In that case, subsequent read requests (page, sort and search) would use a ClientPager.

Add support for the other lifecycle callback methods:
// http://www.html5rocks.com/en/tutorials/webcomponents/customelements/

For progress indicator, add/remove a class to the top level element.
Do this by raising an event and handling it.

When updating rows, account for validation errors from the server.
Or handle the beforeUpdate event and validate there. Then cancel the event if validation does not pass.

Ensure we are handling date values correctly. 

Allow the http module to be configured to use JSON or application/x-www-form-urlencoded.

Add support for two-way binding using proxies.

Add API for CRUD operations.

Add API for search, paging, sorting, etc.

Add support for URL access of sorting, paging, searching, etc.

Add page size config option (default to 25).

Provide an easy way to get at the data via JavaScript.

Might need to re-sync column widths anytime the main table content changes (e.g. deleting or adding rows, paging, sorting).

ChangeMonitor.afterSync should be passed a list of changes.

Standardize property capitalization.

Rework classes to make it easy to target specific sections of the grid.

Create an HtmlWriter class. It would expose an API for building nodes, not just concatenating strings. 
Advantages: 
- No need to convert strings into nodes using the innerHTML hack. 
- Arbitrary properties could be attached to nodes during render. Useful for binding table rows to data rows.

Build a jQuery version.

Build a Polymer version.