Use model binding to set the values of edit controls instead of doing it in the templates.
That way user-supplied templates will get bound along with everything else.

Test radio buttons in edit mode. I'm betting the function that writes changes back to the model won't know how to handle radios.
The usual templating mechanism won't work for edit templates. There's no way to set the values for radios and selects using declarative syntax.
Perhaps we only need to run the sync for edit templates.

When editing or creating a new record, we should run a sync to set the input elements to the declared model if present.

Prevent double-clicking?

Create a modeling class that will work in both gridponent and lojax.

Add a preload config option. Set it to false to put off reading until the user performs some action (e.g. search).
Problem: we use the first read to determine data types. Perhaps we should refresh data types on every read.
This might help compensate for null data.

Now the btn-group in modals is set to small.

Test supplant against null, undefined and functions.

Add a timeout to the progress bar to make sure it gets turned off.

Can we isolate the controllers commandHandler from the editors? Don't like relying on differences in command value.

Eliminate setting config.dataItem.

What happens if a grid is rendered twice? Make sure the original is disposed if this happens.

Add page size config option (default to 25).

Build a jQuery version.

Add a change event to a column:
<gp-column field="IsCurrent" change="fns.isCurrentChanged"></gp-column>

Footer template
edit class

Empty table template

Eliminate the helpers' dependencies on config.

Move the globals into a private variable. Currently they are all on the main object.

Use a CommonJS module library (e.g. webpack).

Allow the http module to be configured to use JSON or application/x-www-form-urlencoded.