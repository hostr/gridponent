Allow adding event handlers declaratively inside the grid, e.g. <grid-ponent after-read="fns.afterRead" ready="fns.gridReady" ...

Add a change event to a column:
<gp-column field="IsCurrent" change="fns.isCurrentChanged"></gp-column>

Footer template

Use the HTML table interface for adding rows: insertRow. http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-13114938

Empty table template

Use Promises instead of callbacks for reads and writes.
<script src="https://www.promisejs.org/polyfills/promise-7.0.4.min.js"></script>

It's best to replace MVC's default JSON serializer with Json.NET:
http://labs.bjfocus.co.uk/2014/06/using-json-net-as-default-json-serializer-in-mvc/

Eliminate the helpers' dependencies on config.

Move the globals into a private variable. Currently they are all on the main object.

Use a CommonJS module library (e.g. webpack).

Create a filter API:

node.api.filter({
	ID: [2,3,4],
	Name: ['Name1','Name2','Name3']
});

The model would apply it thusly:

select * 
from Products
where ID in (2,3,4)
and Name in ('Name1','Name2','Name3')


If paging is turned off, use client pager to sort and search.
Problem: we won't know whether we can use client pager until after we've retrieved data from the server.

Ensure we are handling date values correctly. 

Allow the http module to be configured to use JSON or application/x-www-form-urlencoded.

Add page size config option (default to 25).

Standardize property capitalization.

Rework classes to make it easy to target specific sections of the grid.

Build a jQuery version.

Build a Polymer version.