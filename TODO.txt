When updating rows, account for validation errors from the server.
Or handle the beforeUpdate event and validate there. Then cancel the event if validation does not pass.

If cancel is called, we should revert any edits. That means we'll need to create a copy of the row, preferably with change notification built into the properties.
If canceled, simply discard the copy. But if saved, update the original with the values from the copy.

Ensure we are handling date values correctly. 

Allow the http module to be configured to use JSON or application/x-www-form-urlencoded.

Figure out why fixed headers/footers gets column widths wrong on first render. Maybe it's because the table shifts around once it's populated.

Add support for two-way binding using Object.observe: https://github.com/MaxArt2501/object-observe

Test without paging. With both read and datasource.

Add API for CRUD operations.

Add API for search, paging, sorting, etc.

Add support for URL access of sorting, paging, searching, etc.

Add page size config option (default to 25).

Provide an easy way to get at the data via JavaScript.

Might need to re-sync column widths anytime the main table content changes (e.g. deleting or adding rows, paging, sorting).

ChangeMonitor.afterSync should be passed a list of changes. Follow the convention for Object.observe.

Standardize property capitalization.

Rework classes to make it easy to target specific sections of the grid.

Create an HtmlWriter class. It would expose an API for building nodes, not just concatenating strings. 
Advantages: 
- No need to convert strings into nodes using the innerHTML hack. 
- Arbitrary properties could be attached to nodes during render. Useful for binding table rows to data rows.

Build a jQuery version.

Build a Polymer version.