<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".js" #>
var gridponent = gridponent || {};
(function(gp) { 
<#
var path = "";
var stripLogging = false;
var useMocks = true;

if (Directory.Exists(@"C:\Users\kitntodd"))
{
    path = @"C:\Users\kitntodd\OneDrive\Documents\Code\Projects\gridponent\src";
}
else if (Directory.Exists(@"C:\Users\tpiltingsrud"))
{
    path = @"C:\Users\tpiltingsrud\OneDrive\Documents\Code\Projects\gridponent\src";
}
else
{
    path = @"C:\Users\Todd\OneDrive\Documents\Code\Projects\gridponent\src";
}

var files = new DirectoryInfo(path).GetFiles("*.js", SearchOption.AllDirectories);

foreach (var file in files)
{
	if (useMocks)
	{
		if (!file.Name.StartsWith("mock-") 
			&& files.Where(f => f.Name == "mock-" + file.Name).Any())
		{
			continue;
		}
	}

	// a mechanism for temporarily excluding files
	if (file.Name.StartsWith("x-")) continue;

	// line break before each file
#>

<#
	var lines = File.ReadAllLines(file.FullName);
    foreach (var line in lines)
    {
        if (stripLogging && IsLogExpression(line)) continue;
#>
    <#= line #>
<#  }
}
#>
})(gridponent);
<#+ 
System.Text.RegularExpressions.Regex rLog = new System.Text.RegularExpressions.Regex(@"gp\.log\(|gp\.verbose\(|gp\.info\(|gp\.warn\(");

private bool IsLogExpression(string line)
{
	return rLog.IsMatch(line);
}
#>
