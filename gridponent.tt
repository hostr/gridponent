<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".js" #>
<#
var path = "";
var stripLogging = true;
var coverage = false;
var useMocks = false;

if (coverage)
{
#>
// code coverage
var cov = cov || {};
cov.covered = [];
cov.cover = function(index) {
	cov.covered[index] = true;
	if (cov.callout) {
	    cov.callout(index);
	}
};

<#
}
#>
// namespace
var gridponent = gridponent || {};

(function(gp) { 
<#

if (Directory.Exists(@"C:\Users\kitntodd"))
{
    path = @"C:\Users\kitntodd\OneDrive\Documents\Code\Projects\gridponent\src";
}
else if (Directory.Exists(@"C:\Users\tpiltingsrud"))
{
    path = @"C:\Users\tpiltingsrud\OneDrive\Documents\Code\Projects\gridponent\src";
}
else
{
    path = @"C:\Users\Todd\OneDrive\Documents\Code\Projects\gridponent\src";
}

var files = new DirectoryInfo(path).GetFiles("*.js", SearchOption.AllDirectories);

foreach (var file in files)
{
	if (useMocks)
	{
		if (!file.Name.StartsWith("mock-") 
			&& files.Where(f => f.Name == "mock-" + file.Name).Any())
		{
			continue;
		}
	}
    else
    {
		if (file.Name.StartsWith("mock-"))
		{
			continue;
		}
    }

	// a mechanism for temporarily excluding files
	if (file.Name.StartsWith("x-")) continue;

	// line break before each file
#>

<#
	var lines = File.ReadAllLines(file.FullName);
    foreach (var line in lines)
    {
        if (stripLogging && IsLogExpression(line)) continue;
#>
    <#= line #>
<#  
		if (coverage) {
#>
<#= OutputCoverage(line) #><#  
		}
	}
}

if (coverage)
{
#>
cov.maxCoverage = <#= coverageIndex #>;
<#
}
#>


})(gridponent);
<#+ 
System.Text.RegularExpressions.Regex rLog = new System.Text.RegularExpressions.Regex(@"gp\.log\(|gp\.verbose\(|gp\.info\(|gp\.warn\(");

private bool IsLogExpression(string line)
{
	return rLog.IsMatch(line);
}

int coverageIndex = 0;
System.Text.RegularExpressions.Regex comment = new System.Text.RegularExpressions.Regex(@"\s*//");
System.Text.RegularExpressions.Regex function = new System.Text.RegularExpressions.Regex(@"function.+\{$");
System.Text.RegularExpressions.Regex ifStatement = new System.Text.RegularExpressions.Regex(@"if.+\{$");
System.Text.RegularExpressions.Regex elseStatement = new System.Text.RegularExpressions.Regex(@"else.+\{$");
System.Text.RegularExpressions.Regex lineEnd = new System.Text.RegularExpressions.Regex(@"\{$|;$");
bool inQualifyingStatement = false;

private string OutputCoverage(string line)
{
	if (!comment.IsMatch(line) && 
		(function.IsMatch(line) || ifStatement.IsMatch(line) || elseStatement.IsMatch(line)))
	{
		inQualifyingStatement = true;
	}
	if (inQualifyingStatement && lineEnd.IsMatch(line))
	{
		inQualifyingStatement = false;
		return "cov.cover("+ (++coverageIndex).ToString() + ");\r\n";
	}

	return "";
}
#>
